name: Invoice Validation System

on:
  schedule:
    - cron: '0 9 */4 * *'     # every 4 days @ 09:00 UTC
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'main.py'
      - 'requirements.txt'
      - '.github/workflows/**'

jobs:
  validate-invoices:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clear old local test files (optional)
        run: |
          rm -f downloads/test_data.* downloads/production_summary_*.xlsx || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps (Xvfb, etc.)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb unzip curl dnsutils

      - name: Install Chrome (stable)
        run: |
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || true
          sudo apt-get -f install -y
          google-chrome --version

      - name: Start Xvfb
        run: |
          sudo Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> "$GITHUB_ENV"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install chardet  # ensure available

      - name: Map secrets to env
        shell: bash
        run: |
          echo "RMS_USERNAME=${{ secrets.RMS_USER }}" >> "$GITHUB_ENV"
          echo "RMS_PASSWORD=${{ secrets.RMS_PASS }}" >> "$GITHUB_ENV"

          # Prefer BASE_URL; else use legacy RMS_URL; else blank for now
          if [ -n "${{ secrets.RMS_BASE_URL }}" ]; then
            echo "RMS_BASE_URL=${{ secrets.RMS_BASE_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.RMS_URL }}" ]; then
            echo "RMS_BASE_URL=${{ secrets.RMS_URL }}" >> "$GITHUB_ENV"
          else
            echo "RMS_BASE_URL=" >> "$GITHUB_ENV"
          fi

          echo "RMS_LOGIN_URL=${{ secrets.RMS_LOGIN_URL }}" >> "$GITHUB_ENV"
          echo "RMS_REPORTS_URL=${{ secrets.RMS_REPORTS_URL }}" >> "$GITHUB_ENV"

          # SMTP/Email
          echo "EMAIL_SMTP_SERVER=${{ secrets.SMTP_HOST }}" >> "$GITHUB_ENV"
          echo "EMAIL_SMTP_PORT=${{ secrets.SMTP_PORT }}" >> "$GITHUB_ENV"
          echo "EMAIL_USERNAME=${{ secrets.SMTP_USER }}" >> "$GITHUB_ENV"
          echo "EMAIL_PASSWORD=${{ secrets.SMTP_PASS }}" >> "$GITHUB_ENV"
          echo "EMAIL_FROM=${{ secrets.SMTP_USER }}" >> "$GITHUB_ENV"
          EMAIL_TO=$(printf '%s' "${{ secrets.AP_TEAM_EMAIL_LIST }}" | sed 's/[; ]\+/,/g')
          echo "EMAIL_TO=$EMAIL_TO" >> "$GITHUB_ENV"

          # App flags
          echo "HEADLESS_MODE=true" >> "$GITHUB_ENV"
          echo "GITHUB_ACTIONS=true" >> "$GITHUB_ENV"

      - name: Derive RMS_BASE_URL from RMS_LOGIN_URL (fallback)
        shell: bash
        run: |
          if [ -z "${{ env.RMS_BASE_URL }}" ] && [ -n "${{ env.RMS_LOGIN_URL }}" ]; then
            ROOT="$(echo "${{ env.RMS_LOGIN_URL }}" | awk -F[/:] '{print $1"//"$4}')"
            if [ -n "$ROOT" ]; then
              echo "RMS_BASE_URL=$ROOT" >> "$GITHUB_ENV"
              echo "Derived RMS_BASE_URL=$ROOT"
            fi
          fi

      - name: DNS & HTTPS probe for RMS (graceful)
        shell: bash
        run: |
          set -e
          URL_FOR_HOST="${{ env.RMS_BASE_URL }}"
          if [ -z "$URL_FOR_HOST" ]; then
            URL_FOR_HOST="${{ env.RMS_LOGIN_URL }}"
          fi
          if [ -z "$URL_FOR_HOST" ]; then
            URL_FOR_HOST="${{ env.RMS_REPORTS_URL }}"
          fi

          if [ -z "$URL_FOR_HOST" ]; then
            echo "⚠️ No RMS URL found (RMS_BASE_URL/RMS_LOGIN_URL/RMS_REPORTS_URL). Enabling demo mode."
            echo "FORCE_DEMO=true" >> "$GITHUB_ENV"
            exit 0
          fi

          HOST=$(echo "$URL_FOR_HOST" | awk -F[/:] '{print $4}')
          echo "Resolving $HOST ..."
          if ! nslookup "$HOST" >/dev/null 2>&1; then
            echo "❌ DNS resolution failed for $HOST. Enabling demo mode (internal host likely)."
            echo "FORCE_DEMO=true" >> "$GITHUB_ENV"
            exit 0
          fi

          echo "✅ DNS OK"
          curl -I --max-time 15 "${{ env.RMS_LOGIN_URL }}" || true

      - name: Environment check
        run: |
          echo "Python: $(python --version)"
          echo "Chrome: $(google-chrome --version)"
          echo "Display: $DISPLAY"

      - name: Run validation
        run: |
          echo "=== Start Invoice Validation ==="
          python main.py
          echo "=== Done ==="

      - name: Upload outputs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results-${{ github.run_number }}
          path: |
            *.xlsx
            *.csv
            *.json
            downloads/**
            reports/**
            snapshots/**
            logs/**
          if-no-files-found: warn
          retention-days: 30
