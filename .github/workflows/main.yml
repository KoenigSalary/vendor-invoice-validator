name: Invoice Validation CI

on:
  schedule:
    # Every 4 days @ 09:00 UTC (â‰ˆ 14:30 IST)
    - cron: '0 9 */4 * *'
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'main.py'
      - 'streamlit_app.py'
      - 'requirements.txt'
      - '.github/workflows/**'
      - 'ui/**'
      - 'validator/**'
      - 'drivers/**'
      - 'utils/**'

jobs:
  install-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
    run: |
      python -m pip install --upgrade pip
      # Install requirements except the problematic one
      grep -v "smart-read-table" requirements.txt > temp_requirements.txt
      pip install -r temp_requirements.txt
      pip install chardet

    - name: Run the invoice validation script
      run: |
        echo "=== Start Invoice Validation ==="
        python main.py
        echo "=== Done ==="

    - name: Check installed packages
      run: pip freeze

  validate-invoices:
    environment: prod
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Clear old local test files (optional)
        run: rm -f downloads/test_data.* downloads/production_summary_*.xlsx || true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system deps (Xvfb, curl, DNS utils)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb unzip curl dnsutils

      - name: Install Chrome (stable)
        run: |
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || true
          sudo apt-get -f install -y
          google-chrome --version

      # ðŸ”§ Remove preinstalled chromedriver so Selenium Manager picks the right one for this Chrome version
      - name: Remove preinstalled chromedriver (force Selenium Manager)
        run: |
          sudo rm -f /usr/bin/chromedriver || true
          which chromedriver || true

      - name: Start Xvfb (headless display)
        run: |
          sudo Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
          echo "DISPLAY=:99" >> "$GITHUB_ENV"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install chardet

      # âœ… Simpler one-liner to avoid YAML heredoc pitfalls
      - name: Verify critical imports
        run: python -c "import fitz, openpyxl; print('All critical imports OK')"

      - name: Map secrets to env (including legacy names)
        shell: bash
        run: |
          # RMS creds (both new + legacy for your scripts)
          echo "RMS_USERNAME=${{ secrets.RMS_USER }}" >> "$GITHUB_ENV"
          echo "RMS_PASSWORD=${{ secrets.RMS_PASS }}" >> "$GITHUB_ENV"
          echo "RMS_USER=${{ secrets.RMS_USER }}" >> "$GITHUB_ENV"
          echo "RMS_PASS=${{ secrets.RMS_PASS }}" >> "$GITHUB_ENV"

          # BASE URL preferred; fallback to RMS_URL
          if [ -n "${{ secrets.RMS_BASE_URL }}" ]; then
            echo "RMS_BASE_URL=${{ secrets.RMS_BASE_URL }}" >> "$GITHUB_ENV"
          elif [ -n "${{ secrets.RMS_URL }}" ]; then
            echo "RMS_BASE_URL=${{ secrets.RMS_URL }}" >> "$GITHUB_ENV"
          fi

          # Optional endpoints
          [ -n "${{ secrets.RMS_LOGIN_URL }}" ] && echo "RMS_LOGIN_URL=${{ secrets.RMS_LOGIN_URL }}" >> "$GITHUB_ENV"
          [ -n "${{ secrets.RMS_REPORTS_URL }}" ] && echo "RMS_REPORTS_URL=${{ secrets.RMS_REPORTS_URL }}" >> "$GITHUB_ENV"

          # SMTP/Email
          echo "EMAIL_SMTP_SERVER=${{ secrets.SMTP_HOST }}" >> "$GITHUB_ENV"
          echo "EMAIL_SMTP_PORT=${{ secrets.SMTP_PORT }}" >> "$GITHUB_ENV"
          echo "EMAIL_USERNAME=${{ secrets.SMTP_USER }}" >> "$GITHUB_ENV"
          echo "EMAIL_PASSWORD=${{ secrets.SMTP_PASS }}" >> "$GITHUB_ENV"
          echo "EMAIL_FROM=${{ secrets.SMTP_USER }}" >> "$GITHUB_ENV"
          EMAIL_TO=$(printf '%s' "${{ secrets.AP_TEAM_EMAIL_LIST }}" | sed 's/[; ]\+/,/g')
          echo "EMAIL_TO=$EMAIL_TO" >> "$GITHUB_ENV"

          echo "HEADLESS_MODE=true" >> "$GITHUB_ENV"
          echo "GITHUB_ACTIONS=true" >> "$GITHUB_ENV"

      - name: Run validation
        run: |
          echo "=== Start Invoice Validation ==="
          python main.py
          echo "=== Done ==="

      - name: Upload outputs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results-${{ github.run_number }}
          path: |
            *.xlsx
            *.csv
            *.json
            downloads/**
            reports/**
            snapshots**
            logs/**
          if-no-files-found: warn
          retention-days: 30
